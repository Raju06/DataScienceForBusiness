
DATA SCIENCE FOR BUSINESS - Lecture 2
================================================================================
width: 1920
height: 1080
```{r echo=FALSE}
opts_chunk$set(fig.align='center', fig.width=18, fig.height=10)

```
Author: Gene Leynes

Date: January 15, 2015


About me:
================================================================================
Education
 - University of Chicago MBA
 - DePaul University Math / Statistics
Experience
 - Milliman consultant – more than 100 projects over 6 years in a variety of industries, client types, and project sizes
 - Entrepreneur – Developed fully automated, real time trading systems for hedge funds / broker dealers
 - Milliman consultant (part 2) – Product development / data mining for large scale multinational projects
 - Founder of Chicago Data Science (Entrepreneur part 2)
   + Large scale server performance analysis, sensor analysis, microcontrollers, hedge fund work
   + Help other start-up companies at 1871 
 - Data Scientist at the City of Chicago (May 2014)
   + SmartData Platform project; Bloomberg funded

Today's class
================================================================================
 - Doing data science
  - The data science workflow
  - Why R
  - How to learn R (lots of handouts)
  
 - Doing data science, the real details that nobody tells you
  - Text editing 
  - IDE (R Studio)
  - File comparison
  - Style guides
  
 - Version control
 
 - Analysis in R



The Data Science Workflow
================================================================================

![process.png](images_lec2/PROCESS.PNG)


Typical Project's folder structure
================================================================================

<br>
## Project structure
![TypicalProject](images_lec2/TypicalProject.png)  

**********

<br>
## Data Structure
![TypicalProject](images_lec2/TypicalProjectData.png)


Start of a typical script
================================================================================

Because the environment is completely initialized, the result is reproducable.
```{r, eval=FALSE}
##------------------------------------------------------------------------------
## INITIALIZATION
##------------------------------------------------------------------------------
rm(list=ls())
gc()
library(geneorama)
detach_nonstandard_packages()
library(geneorama)
loadinstall_libraries(c("geneorama", "data.table", "reshape2", "Matrix"))

sourceDir("functions/")
op <- readRDS("data/op.Rds")  ## Default par
par(op)

##------------------------------------------------------------------------------
## Load data for vacant buildings and violations
##------------------------------------------------------------------------------
filepath1 <- "data/20140507/Building_Violations.Rds"
filepath2 <- "data/20140507/Building_Violations__VIOLATION_ORDINANCE.Rds"
filepath3 <- "data/20140507/Building_Violations__VIOLATION_ORDINANCE_dummy_matrix.Rds"

datBuild <- readRDS(filepath1)
VIOLATION_ORDINANCE <- readRDS(filepath2)
VIOLATION_ORDINANCE_DM <- readRDS(filepath3)

##------------------------------------------------------------------------------
## (describe next steps here...)
##------------------------------------------------------------------------------

## Typically this includes, data prep, analysis, saving results

```

CRAN Task Views (http://cran.r-project.org/web/views/)
================================================================================

Main View:
------------------------
![taskviews](images_lec2/cran_taskviews.png)
***
Individual Task view
------------------------
![taskviews](images_lec2/cran_taskviews_finance.PNG)


How to learn R
================================================================================

"There are many like it, but this one is mine."  - from the Rifleman's Creed, Major General William H. Rupertus 

There are many great guides, blog posts, and ways to learn R.  Some of the best are brand new, but not all of the information is created equally. 

 - CRAN is always the maintainer of the R application and the default source of information: http://cran.r-project.org/
 - R Studio is the best choice for code editing and project mangement http://www.rstudio.com/
 - R Studio also has lots of related "learning R" resources
 
CRAN Specific resources:
 - The R FAQs are invaluable: http://cran.r-project.org/faqs.html
 - The statndard documentation is also invaluable: http://cran.r-project.org/manuals.html
 - You can access help right from R with "?".  For example, you can learn about the `lm` funciton by typing `?lm` at the console.
 - CRAN resources and help can be very hard to understand, this is normal.  Remember to use many approaches to solve problems.
 - Download and print this cheat sheet: http://cran.r-project.org/doc/contrib/Short-refcard.pdf
 - See also http://cran.r-project.org/doc/contrib/Baggott-refcard-v2.pdf (this one is new to me)

Best Guides and References
================================================================================
<br>
### Best Guides:
My favorite R resources for quick help:
 - http://www.cookbook-r.com/
 - http://www.r-statistics.com/

If you have experienced a singularity and have near infinite time to think:
 - http://www.r-bloggers.com/
 - http://cran.r-project.org/doc/contrib/
 - http://cran.r-project.org/doc/contrib/usingR.pdf
 - http://cran.r-project.org/web/views/

-------------
<br>
### Best packages:
 - `data.table` The data frame evolved.
    - http://cran.r-project.org/web/packages/data.table/vignettes/datatable-faq.pdf
 - `ggplot2` Hadley's Grammar of graphics
 	- http://ggplot2.org/
 	- http://www.cookbook-r.com/Graphs/
 - `caret` Max Kuhn's machine learning pacakge
    - http://topepo.github.io/caret/index.html 
 	- http://www.amazon.com/Applied-Predictive-Modeling-Max-Kuhn/dp/1461468485
 - `knitr` Yihui Xie's report writing tool based on markdown
 	- http://yihui.name/knitr/
 	- http://rmarkdown.rstudio.com/
 - `shiny` R Studio's jQuery powered application maker
 	- http://shiny.rstudio.com/


Stackoverflow (enjoy googling stuff? Then be a data scientist)
================================================================================
![Stackoverflow](images_lec2/Stackoverflow_annotated.PNG)


Where to get help
================================================================================

<br>
Pay attention to _when_ something was written, and to _who_ wrote it. Some people seem to write guides as a way of learning themselves...
 - http://stackoverflow.com/questions/tagged/R
 - Look for package vignettes

------------------------
Stackoverflow posting guide:
------------------------
![SO Posting guide](images_lec2/tech_support_cheat_sheet.png)<br>
source: http://www.xkcd.com/627/




IDE vs Text Editor vs Command Line
================================================================================
There are different ways to use R, but you're going to want a good text editor to look at code, settings, and anything that's not compiled.

![texteditor](images_lec2/texteditor.PNG)

IDE vs Text Editor vs Command Line



================================================================================


![texteditor](images_lec2/different_ways_to_use_R.PNG)





================================================================================
# Source Control using git

I _highly_ recommend that you avoid using a GUI for git.

The ruby on rails book has an excellent and concise description of how to use git
 - https://www.railstutorial.org/book/beginning#sec-version_control
source: RUBY ON RAILS TUTORIAL - Learn Rails by Example by Michael Hartl

The website that hosts git also host the best documentation on git.
 - http://git-scm.com/
 
Also, github has excellent documentation, especially on technical issues like RSA keys and ssh access.
 - https://github.com/

Github uses git, but they are not the same things!
People seem to think that github is git.  Github is a host (probably the best host) were people can share git repositories.

https://github.com/ <br>
https://github.com/geneorama/  <<- me

================================================================================
## Github

Github is by far the best way to use git, but you should still download git
Download git: http://git-scm.com/

Github supports: 
 - Branch comparison
 - Issues
 - Workflow assignments
 - Team managment
 - Commenting
 - Communication
 - Markdown

***

![Stackoverflow](images_lec2/winmerge.PNG)

================================================================================
## File comparison

It's important to have a good way to compare and merge files.  My preferred solution is Winmerge, but you can find many other programs online
 - http://winmerge.org/

![Stackoverflow](images_lec2/winmerge.PNG)







================================================================================
# Small Example

Topics: Assignment, variables, functions, random number generation,
        factors, comments, vectors

```{r}
## Boxplot Example with gl
g <- factor(round(10 * runif(10*100)))
x <- rnorm(10*100) + sqrt(as.numeric(g))
boxplot(x ~ g, col = 'lavender', notch = T, var.width = T,
		main = "something random")
```


================================================================================
# `ggplot` (Grammar of graphics) Example

```{r, results="hide"}
## Load libraries:
rm(list=ls())
library(data.table)
library(ggplot2)

## Generate some data:
n_groups <- 10
n_obs <- 100
MyData <- data.table(
	group = factor(round(10 * runif(10*100))))

MyData[i = TRUE, 
	   j = YValue := rnorm(10*100) + sqrt(as.numeric(group))]

# ggplot(MyData) + aes(x = group, 
# 					   y = YValue, 
# 					   color = group) + 
# 	geom_point()
```
***
```{r}
## GGplot code:
ggplot(MyData) + 
	aes(x=group, y=YValue, color=group) + 
	geom_boxplot()

```
